library(tidyverse)
#B?TCR sequencing libraries
library(alakazam)
library(immunarch)
library(airr)
#Find in McPAS CDR3 from the immdata. Choose one length of CDR3 and prepare sequence logo
database_file <- "http://friedmanlab.weizmann.ac.il/McPAS-TCR/session/450fd4a0f41ea0e391d61a90331b4678/download/downloadDB?w="
mcpas_df <- read_csv(database_file )
#Find in McPAS CDR3 from the immdata. Choose one length of CDR3 and prepare sequence logo
database_file <- "http://friedmanlab.weizmann.ac.il/McPAS-TCR/session/450fd4a0f41ea0e391d61a90331b4678/download/downloadDB?w="
mcpas_df <- read_csv(database_file )
mcpas_df
mcpas_df
airr_file <- system.file("extdata", "example_airr.tsv.gz", package="alakazam")  #Establish the full path of the example file from "alakazam"
db_airr <- read_tsv(airr_file)
db_airr
gu
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dplyr")
?install.packages
sessionInfo()
library(gsl)
?gsl
sessionInfo()
?install.packages
library(tidyverse)
#B?TCR sequencing libraries
library(alakazam)
library(immunarch)
library(airr)
?immunarch_data_format
data(immdata)  # load a dataset 'immdata', included with Immunarch
repSave(immdata, "reps")
immdata <- repLoad("reps")
glimpse(immdata)
names(immdata)
names(immdata$data)
glimpse(immdata$data[[1]])
install.packages("screpertoire")
immdata <- repLoad("data/reps")
glimpse(immdata)
names(immdata)
names(immdata$data)
glimpse(immdata$data[[1]])
top(immdata$data[[1]])
top(immdata$data[[4]], .n=3)
#Now have a look on 3 most abundant clonotypes from each repertoire. Use lapply() to execute the same function as previously on each element of the list.
lapply(immdata$data, top, .n=3)
#actually top() guesses what we want to do when we input a list of samples instead of one sample:
top(immdata$data, .n=3)
#We can directly gather this list into a tibble with bind_rows(), preserving sample names:
top(immdata$data, .n=3)%>%
bind_rows(.id="sample_id")
#We can directly gather this list into a tibble with bind_rows(), preserving sample names:
top(immdata$data, .n=3)%>%
bind_rows(.id="sample_id")
# Extract all clonotypes with V gene  'TRBV10-1' from the first sample
immdata$data[[1]]%>%
filter( V.name == 'TRBV10-1')
coding(immdata)
coding(immdata$data)
repExplore(immdata$data, "volume")
repExplore(immdata$data, "volume")
#To visualize, you may use your own function or Immunarch's vis() directly on this output:
repExplore(immdata$data, "volume")%>%
vis()
?repExplore
repOverlap(immdata$data,
.col="aa+v",
.method="overlap")
gu <- geneUsage(immdata$data, .type = "segment",.quant="count", .norm=TRUE)
vis(gu)
geneUsageAnalysis(gu, "pca", .verbose = FALSE) %>%
vis()
gu
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample")
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq")%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot(aes( x= Names, y= "freq", group=sample_type)) +geom_boxplot(aes(col=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq")%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot(aes( x= Names, y= "freq", group=Names)) +geom_boxplot(aes(col=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq")%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = sample,values_to = freq)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq")%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot(aes( x= Names, y= freq, group=Names)) +geom_boxplot(aes(col=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq")%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot(aes( x= Names, y= freq, group=Names)) +geom_boxplot(aes(fill=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", )%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot(aes( x= Names, y= freq, group=Names)) +geom_boxplot(aes(fill=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot(aes( x= Names, y= freq, group=Names)) +geom_boxplot(aes(fill=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot(aes( x= Names, y= freq, group=Names)) +geom_boxplot(aes(fill=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
filter(is.na(sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=Names,fill=sample_type))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=Names,fill=as.factor(sample_type)))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=sample_type, fill=as.factor(sample_type)))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=as.factor(sample_type)))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=sample_type))+
theme(axis.text.x = element.text(angle=45))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=sample_type))+
theme(axis.text.x = element_text(angle=45))
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=sample_type))+
theme(axis.text.x = element_text(angle=45))+
theme_classic()
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=sample_type))+
theme_classic()+
theme(axis.text.x = element_text(angle=45))+
ggtitle("V gene usage ")
?geneUsage
gu <- geneUsage(immdata$data, .type = "segment", .norm=TRUE)
vis(gu)
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=sample_type))+
theme_classic()+
theme(axis.text.x = element_text(angle=45))+
ggtitle("V gene usage ")
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=sample_type))+
theme_classic()+
theme(axis.text.x = element_text(angle=45,vjust = 0))+
ggtitle("V gene usage ")
gu %>%
pivot_longer(cols = `A2-i129`: MS6, names_to = "sample",values_to = "freq", values_drop_na = TRUE)%>%
mutate(sample_type = ifelse(grepl("M", sample), "M", "A"))%>%
ggplot() +geom_boxplot(aes( x= Names, y= freq, group=interaction(sample_type,Names), fill=sample_type))+
theme_classic()+
theme(axis.text.x = element_text(angle=45,vjust = 0.5))+
ggtitle("V gene usage ")
target <- c("CASSLEETQYF", "CASSDSSGGANEQFF", "CASSDSSGSTDTQYF", "CASSLAGGYNEQFF", "CASSDSAGGTDTQYF", "CASSLDSYEQYF", "CASSSAGGYNEQFF")
immdata$data[[1]]%>%
filter(CDR3.aa %in%target )
tc <- trackClonotypes(immdata$data, target, .col = "aa")
vis(tc)
?trackClonotypes
tc <- trackClonotypes(immdata$data, target, .col = "aa")
tc
vis(tc)
#Downsampling - sample 100 cells
ds = repSample(immdata$data, "downsample", 100)
glimpse(ds)
#Find in McPAS CDR3 from the immdata. Choose one length of CDR3 and prepare sequence logo
# database_file <- "http://friedmanlab.weizmann.ac.il/McPAS-TCR/session/450fd4a0f41ea0e391d61a90331b4678/download/downloadDB?w="
database_file <- "data/McPAS-TCR.csv"
mcpas_df <- read_csv( database_file )
mcpas <- dbLoad(.path = database_file,
.db="mcpas",
.species = "Human",
.chain = "TRB",
.pathology = "Cytomegalovirus (CMV)")
tcrs_matched_to_mcpas <- dbAnnotate(.data = immdata$data, .db = mcpas,
.data.col = c("CDR3.aa", "V.name"),
.db.col = c("CDR3.beta.aa", "TRBV"))
matched_cmvs <- matched_to_mcpas %>%
filter(Samples>1) %>%
as_tibble()
tcrs_matched_cmvs <- tcrs_matched_to_mcpas %>%
filter(Samples>1) %>%
as_tibble()
tcrs_matched_cmvs
tcrs_matched_cmvs
nchar(tcrs_matched_cmvs)
chosen_length=11
for_logo <- tibble(CDR3.aa=tcrs_matched_cmvs$CDR3.aa, len= nchar(tcrs_matched_cmvs$CDR3.aa))%>%
arrange(len)%>%
filter(len==chosen_length)
nchar(tcrs_matched_cmvs$CDR3.aa)
chosen_length=11
for_logo <- tibble(CDR3.aa=tcrs_matched_cmvs$CDR3.aa, len= nchar(tcrs_matched_cmvs$CDR3.aa))%>%
arrange(len)%>%
filter(len==chosen_length)
for_logo
getKmers(for_logo, .k=11)%>%
kmer_profile%>%
vis_seqlogo
library(tidyverse)
#B/TCR sequencing libraries
library(alakazam)
library(immunarch)
library(airr)
#scRNAseq specific libraries
library(Seurat)
library(scRepertoire)
contig_file <- "10x_data/sc5p_v2_hs_T_1k_multi_5gex_t_vdj_t_all_contig_annotations.csv"
contig_file <- "data/10x_data/sc5p_v2_hs_T_1k_multi_5gex_t_vdj_t_all_contig_annotations.csv"
contigs <- read_csv(contig_file )
#this file is the cleaner version of contigs (without not_cells,  with high_confidence, with TRA or TRB chain only, full length and productive)
rearr_file <- "data/10x_data/sc5p_v2_hs_T_1k_multi_5gex_t_vdj_t_airr_rearrangement.tsv"
rearr <- read_tsv(rearr_file)
#rearrangement file is in the standard AIRR format:
airr::validate_airr(rearr)
contigs
library(immunarch)
?repLoad
rnase_extracted  <- read_tsv("results/receptors_extracted_from_RNAseq_report.tsv")
rnaseq_extracted  <- read_tsv("results/receptors_extracted_from_RNAseq_report.tsv")
rnaseq_extracted  <- read_tsv("results/receptors_extracted_from_RNAseq_report.tsv")
rnaseq_extracted  <- read_tsv("results/receptors_extracted_from_RNAseq_report.tsv")
rnaseq_extracted
rnaseq_extracted %>%
transmute(Clones= `#count`,
Proportion=frequency,
CDR3.nt=CDR3nt,
CDR3.aa=CDR3aa,
V.name=V,
D.name=D,
J.name=J,
V.end=NA,
D.start=NA,
D.end=NA,
J.start=NA,
VJ.ins=NA,
VD.ins=NA,
DJ.ins=NA,
Sequence=NA)
immdata_from_RNA <- list( data=rnaseq_extracted_immunarch, metadata= NA)
rnaseq_extracted_immunarch <- rnaseq_extracted %>%
transmute(Clones= `#count`,
Proportion=frequency,
CDR3.nt=CDR3nt,
CDR3.aa=CDR3aa,
V.name=V,
D.name=D,
J.name=J,
V.end=NA,
D.start=NA,
D.end=NA,
J.start=NA,
VJ.ins=NA,
VD.ins=NA,
DJ.ins=NA,
Sequence=NA)
immdata_from_RNA <- list( data=rnaseq_extracted_immunarch, metadata= NA)
rnaseq_extracted
rnaseq_extracted$C %>%table()
rnaseq_extracted%>%filter(C==".")
rnaseq_extracted %>%
mutate(chain=gsub("\\*.*","",V))
rnaseq_extracted %>%
mutate(chain=gsub("\\*.*",replacement = "",x = V))
rnaseq_extracted %>%
mutate(chain=gsub("\*.*",replacement = "",x = V))
rnaseq_extracted %>%
mutate(chain=gsub(pattern = "\\*.*",replacement = "",x = V))
rnaseq_extracted %>%
mutate(chain=case_when(grepl("TRB", V)~"TRB",
grepl("TRA", V)~"TRA",
grepl("TRG", V)~"TRG",
grepl("TRD", V)~"TRD",
grepl("IGK", V)~"IGK",
grepl("IGL", V)~"IGL"))
rnaseq_extracted %>%
mutate(chain=case_when(grepl("TRB", V)~"TRB",
grepl("TRA", V)~"TRA",
grepl("TRG", V)~"TRG",
grepl("TRD", V)~"TRD",
grepl("IGK", V)~"IGK",
grepl("IGL", V)~"IGL"))%>%
summarise(rearrangements = sum(`#counts`))
rnaseq_extracted %>%
mutate(chain=case_when(grepl("TRB", V)~"TRB",
grepl("TRA", V)~"TRA",
grepl("TRG", V)~"TRG",
grepl("TRD", V)~"TRD",
grepl("IGK", V)~"IGK",
grepl("IGL", V)~"IGL"))%>%
summarise(rearrangements = sum(`#count`))
rnaseq_extracted %>%
mutate(chain=case_when(grepl("TRB", V)~"TRB",
grepl("TRA", V)~"TRA",
grepl("TRG", V)~"TRG",
grepl("TRD", V)~"TRD",
grepl("IGK", V)~"IGK",
grepl("IGL", V)~"IGL"))%>%
group_by(chain) %>%
summarise(rearrangements = sum(`#count`))
clonot
clonot_file <- "data/10x_data/sc5p_v2_hs_T_1k_multi_5gex_t_vdj_t_clonotypes.csv"
clonot <- read_csv(clonot_file)
clonot
library(scRepertoire)
#good in: diversity, overlaps, alluvial graphs
#works with sce and Seurat object
data("contig_list") #the data built into scRepertoire, the same format as contigs
glimpse(contig_list)
#Take a peek in the first sample
glimpse(contig_list[[1]])
######### Exercise to train your dplyr/ggplot skills
# check how many TRA/TRB chains are detected in cells
#For each cell barcode, check how many TRA and TRB chains are available in the first sample
contig_list[[1]] %>%
filter(cdr3!="None",raw_consensus_id!="None")%>%
group_by(barcode)%>%
summarise(number_of_tras = sum(chain=="TRA"),
number_of_trbs = sum(chain=="TRB"))
#Check how many cells have each combination of chain number (0 alpha - 1 beta, 1 alpha - 1 beta etc.).
contig_list[[1]] %>%
filter(cdr3!="None",raw_consensus_id!="None")%>%
group_by(barcode)%>%
summarise(number_of_TRAs = sum(chain=="TRA"), number_of_TRBs = sum(chain=="TRB"))%>%
group_by(number_of_TRAs, number_of_TRBs)%>%
summarise(number_of_cells = n())
#Repeat the same for all samples
lapply(contig_list, function(one_rep){
one_rep%>%
filter(cdr3!="None",raw_consensus_id!="None")%>%
group_by(barcode)%>%
summarise(number_of_TRAs = sum(chain=="TRA"), number_of_TRBs = sum(chain=="TRB"))%>%
group_by(number_of_TRAs, number_of_TRBs)%>%
summarise(number_of_cells = n())
})
names(contig_list)
#Joining it all in one data frame
chains_per_samples <- lapply(1:length(contig_list), function(one_rep){
contig_list[[one_rep]]%>%
filter(cdr3!="None",raw_consensus_id!="None")%>%
group_by(barcode)%>%
summarise(number_of_TRAs = sum(chain=="TRA"), number_of_TRBs = sum(chain=="TRB"))%>%
group_by(number_of_TRAs, number_of_TRBs)%>%
summarise(number_of_cells = n())%>%
mutate(ID = paste0("sample", one_rep))}) %>%
bind_rows()%>%
ungroup()
# Plot for each sample number of cells with each combination of chain numbers
chains_per_samples %>%
ggplot(aes(x=interaction(number_of_TRAs,number_of_TRBs), y= number_of_cells, col=ID)) +
geom_jitter(height=0, width=0.2, size=3, alpha=0.5)  +   #from here just plot polishing
theme_bw()+
xlab("TRA.TRB chains")+
scale_color_discrete(name="Sample")
# Plot for each sample fraction of cells with each combination of chain numbers
chains_per_samples %>%
group_by(ID)%>%
mutate(fraction_of_cells = number_of_cells/sum(number_of_cells))%>%
ggplot(aes(x=interaction(number_of_TRAs,number_of_TRBs), y= fraction_of_cells, col=as.factor(ID))) +
geom_jitter(height=0, width=0.2, size=3, alpha=0.5)+
theme_bw()+
xlab("TRA.TRB chains")+
scale_color_discrete(name="Sample")
combined <- combineTCR(contig_list,
samples = c("PY", "PY", "PX", "PX", "PZ","PZ"),
ID = c( "P", "T",  "P", "T", "P", "T"),
cells ="T-AB",
removeNA = FALSE,
removeMulti = FALSE,
filterMulti = FALSE)
class(combined)
names(combined)
combined[[1]]
glimpse(combined[[1]])
library(tidyverse)
glimpse(combined[[1]])
colnames(combined[[1]])
quantContig(combined, cloneCall="gene+nt", scale = TRUE)
library(tidyverse)
#B/TCR sequencing libraries
library(alakazam)
library(immunarch)
library(airr)
#scRNAseq specific libraries
library(Seurat)
library(scRepertoire)
quantContig(combined, cloneCall="gene+nt", scale = TRUE)
quantContig(combined, cloneCall="gene+aa", scale = TRUE, exportTable = TRUE)
combined[[1]]
combined[[1]]%>%glimpse
?quantContig
quantContig(combined, cloneCall="gene", scale = TRUE, exportTable = TRUE)
quantContig(combined, cloneCall="gene+nt", scale = TRUE)
quantContig(combined, cloneCall="gene", scale = TRUE, exportTable = TRUE)
#The same manualy from the combined object
combined[[1]]$CTaa%>%
length()
combined[[1]]$CTaa %>%
unique%>%length()
#The same manualy from the combined object
combined[[1]]$CTgene%>%
length()
combined[[1]]$CTgene %>%
unique%>%length()
#How many clonotypes with 1,2,....clones
abundanceContig(combined, cloneCall = "gene+nt", scale = FALSE)
#Check length
lengthContig(combined, cloneCall="aa", chains = "single")  #Guess why so many CDR3 with length=2 - it counts 'NA' as 2AA!
#Track presence of a clone within samples
compareClonotypes(combined, numbers = 10, samples = c("PX_T", "PX_P"),
cloneCall="aa", graph = "alluvial")
#Add now the sample "PZ_P" (another individual, PBMC). What do you expect?
compareClonotypes(combined, numbers = 10, samples = c("PX_T", "PX_P", "PZ_P"),
cloneCall="aa", graph = "alluvial")
#Compare how expanded are clonotypes in each of the samples. What do you expect for the paired comparison of PBMC and tumour?
clonalHomeostasis(combined, cloneCall = "aa")
#Do you expect any overlap in TCRs between samples? What biological and technical factors would increase/decrease overlap?
clonalOverlap(combined, cloneCall = "aa", method = "overlap", exportTable = FALSE)
#Diversity - some measures, not normalised.
clonalDiversity(combined, cloneCall = "gene", group = "ID", exportTable = TRUE)
clonalDiversity(combined, cloneCall = "gene", group = "ID", exportTable = FALSE)
#### Read in expression Seurat object
library(Seurat)
screp_example <- get(data("screp_example"))
screp_example
#Seurat Format, use standard Seurat functions/framework
DimPlot(screp_example)
#Match clonotypes of barcodes to expression
#Here make sure cell barcodes/sample names are matched between datasets!
screp_example <- combineExpression(combined,
screp_example,
cloneCall="gene", groupBy = "sample")
#Clone info is now in the metadata slot
screp_example@meta.data %>%head()
#Lets add info about from what size
slot(screp_example, "meta.data")$cloneType <- factor(slot(screp_example, "meta.data")$cloneType,
levels = c("Hyperexpanded (100 < X <= 500)", "Large (20 < X <= 100)",
"Medium (5 < X <= 20)", "Small (1 < X <= 5)",
"Single (0 < X <= 1)", NA))
occupiedscRepertoire(screp_example, x.axis = "cluster")
